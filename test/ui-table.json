[
    {
        "id": "4d93f23e.8258ac",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n- delete custom colum order and restore colum order from the tabulator json. This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n- delete custom column widths\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnWidth\"\n}\n```\n- delete tableCache\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"tableCache\"\n}\n```\n\n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "6b307f57.d035d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "6b307f57.d035d",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "6b307f57.d035d",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "6b307f57.d035d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6b307f57.d035d",
        "type": "function",
        "z": "4d93f23e.8258ac",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":\"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    for (let device in tableData) {\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[device]) {\n            continue;\n        }\n        // merge edits into table\n        if (tableEdit && tableEdit.hasOwnProperty(device)) {\n            let tableRow = RED.util.cloneMessage(tableData[device]);\n            Object.keys(tableEdit[device]).forEach((field) => {\n                tableRow[field]=tableEdit[device][field];\n            });\n            msg.payload.push(tableRow);\n        } else {\n            msg.payload.push(tableData[device]);\n        }\n    }\n    \n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark es edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let device in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(device)) {\n                    msg.ignoredDevices.push({\"text\":device,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":device})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "b9d1553f.78f178",
        "type": "subflow",
        "name": "ui-table handler (5)",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-controlÂ´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n- delete custom colum order and restore colum order from the tabulator json. This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n- delete custom column widths\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnWidth\"\n}\n```\n- delete tableCache\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"tableCache\"\n}\n```\n\n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "ef161c6.1f15be"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "ef161c6.1f15be",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "ef161c6.1f15be",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "ef161c6.1f15be",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ef161c6.1f15be",
        "type": "function",
        "z": "b9d1553f.78f178",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":\"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    for (let device in tableData) {\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[device]) {\n            continue;\n        }\n        // merge edits into table\n        if (tableEdit && tableEdit.hasOwnProperty(device)) {\n            let tableRow = RED.util.cloneMessage(tableData[device]);\n            Object.keys(tableEdit[device]).forEach((field) => {\n                tableRow[field]=tableEdit[device][field];\n            });\n            msg.payload.push(tableRow);\n        } else {\n            msg.payload.push(tableData[device]);\n        }\n    }\n    \n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark es edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let device in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(device)) {\n                    msg.ignoredDevices.push({\"text\":device,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":device})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "b14e8366.8ef76",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "13da6d88.9e5a12",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "deviceStatus Livingroom",
        "topic": "",
        "payload": "{\"location\":\"Livingroom\",\"rssi\":\"-80\",\"mode\":\"0\",\"ip\":\"6\",\"channel\":\"7\",\"sleeptime\":\"1\",\"uptime\":\"140\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "1f7ea17c.b4beff",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "deviceStatus Kitchen",
        "topic": "",
        "payload": "{\"location\":\"Kitchen\",\"rssi\":\"-36\",\"mode\":\"0\",\"ip\":\"16\",\"channel\":\"7\",\"sleeptime\":\"1\",\"uptime\":\"160\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "3fb8b066.f93ce",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "deviceStatus Bedroom",
        "topic": "",
        "payload": "{\"location\":\"Bedroom\",\"rssi\":\"-79\",\"mode\":\"0\",\"ip\":\"26\",\"channel\":\"7\",\"sleeptime\":\"1\",\"uptime\":\"151\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "b3daaf26.8581f",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "sensorValues Livingroom",
        "topic": "SensorValues",
        "payload": "{\"location\":\"Livingroom\",\"voltage\":\"2.62\",\"temperature\":\"75\",\"humidity\":\"48\",\"pressure\":\"1003\",\"light\":\"88\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "27f60f58.00b6",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "sensorValues Kitchen",
        "topic": "SensorValues",
        "payload": "{\"location\":\"Kitchen\",\"voltage\":\"2.62\",\"custom\":\"9\",\"motion\":\"44\",\"presence\":\"0\",\"level\":\"8\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "abde4880.3965d8",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "sensorValues Bedroom",
        "topic": "SensorValues",
        "payload": "{\"location\":\"Bedroom\",\"voltage\":\"2.62\",\"level\":\"8\",\"presence\":\"0\",\"motion\":\"1\",\"custom\":\"60\"}",
        "payloadType": "json",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "4a52b98d.ab1e78",
        "type": "mqtt in",
        "z": "b14e8366.8ef76",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "utf8",
        "broker": "b81701a5.db23e",
        "x": 70,
        "y": 200,
        "wires": [
            [
                "57f9056d.930f8c"
            ]
        ]
    },
    {
        "id": "57f9056d.930f8c",
        "type": "json",
        "z": "b14e8366.8ef76",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 200,
        "wires": [
            [
                "34ace652.d9fbfa"
            ]
        ]
    },
    {
        "id": "34ace652.d9fbfa",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "Translate BatteryNode",
        "func": "\nif (msg.payload.hasOwnProperty(\"location\")) {\n    \n    msg.topic=msg.payload[\"location\"];\n    \n    msg.state={\"$location\":msg.payload[\"location\"]};\n    msg.state.temperature=msg.payload[\"temperature\"];\n    msg.state.humidity=msg.payload[\"humidity\"];\n    msg.state.pressure=msg.payload[\"pressure\"];\n    msg.state.light=msg.payload[\"light\"];\n    msg.state.openclose=msg.payload[\"openclose\"];\n    msg.state.level=msg.payload[\"level\"];\n    msg.state.presence=msg.payload[\"presence\"];\n    msg.state.motion=msg.payload[\"motion\"];\n    msg.state.custom=msg.payload[\"custom\"];\n    \n    msg.state.rssi=msg.payload[\"rssi\"];\n    msg.state.mode=msg.payload[\"mode\"];\n    msg.state.ip=msg.payload[\"ip\"];\n    msg.state.channel=msg.payload[\"channel\"];\n    msg.state.sleeptime=msg.payload[\"sleeptime\"];\n    msg.state.uptime=msg.payload[\"uptime\"];\n    \n    //msg.state.cpuload=msg.payload.System.Load;\n    //msg.state.lastBootCause=msg.payload.System[\"Last Boot Cause\"];\n    //msg.state.resetReason=msg.payload.System[\"Reset Reason\"];\n    //msg.state.version=msg.payload.System.Build;\n    //msg.state.name=\"ESP Easy Mega\";\n\n    //if (msg.payload.hasOwnProperty(\"rssi\")) {\n        //msg.state.rssi=Math.min(Math.max(2 * (msg.payload.rssi + 100), 0), 100)\n     \n        //msg.state.$mac=msg.payload.WiFi[\"STA MAC\"];\n        //msg.state.SSID=msg.payload.WiFi.SSID;\n   }\n//}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 200,
        "wires": [
            [
                "721f1868.d5ab18",
                "72903824.194538"
            ]
        ],
        "icon": "node-red/swap.svg"
    },
    {
        "id": "72903824.194538",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "httpOut translated",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "721f1868.d5ab18",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "toPlugins",
        "links": [
            "6506ef63.6cfad",
            "128206ff.de6659"
        ],
        "x": 535,
        "y": 240,
        "wires": []
    },
    {
        "id": "a4c26e45.91c54",
        "type": "subflow:b9d1553f.78f178",
        "z": "b14e8366.8ef76",
        "name": "",
        "env": [
            {
                "name": "tabulator",
                "value": "{\"customHeight\":18,\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$topic\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"Expand&nbsp;&nbsp;<i class='fa fa-plus-circle'></i> \",\"field\":\"expand\",\"headerVertical\":\"flip\",\"headerTooltip\":\"click to expand more details\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"outputFormat\":\"DD/MM/YY hh:mm:ss\",\"inputFormat\":\"YYYY-MM-DD hh:mm:ss\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Time Received&nbsp;&nbsp;<i class='fa fa-clock-o'></i>\",\"field\":\"time\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":75,\"headerVertical\":\"flip\",\"headerTooltip\":\"Time data received\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal&nbsp;&nbsp;<i class='fa fa-signal fa-rotate-90'></i>\",\"field\":\"ssid\",\"width\":40,\"align\":\"center\",\"frozen\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Signal Strength for WiFi device (signalIcon)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Location&nbsp;&nbsp;<i class='fa fa-map-marker fa-rotate-90'></i>\",\"field\":\"$location\",\"width\":140,\"headerTooltip\":\"Location of the device (room)\",\"tooltip\":true,\"headerVertical\":\"flip\",\"editor\":\"autocomplete\",\"editorParams\":{\"freetext\":true,\"allowEmpty\":true,\"showListOnEmpty\":true,\"values\":true},\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Name&nbsp;&nbsp;<i class='fa fa-tag fa-rotate-90'></i>\",\"field\":\"$location\",\"width\":140,\"frozen\":true,\"tooltip\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the device ($name)\",\"editor\":\"input\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContextNoHide'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Last Update&nbsp;&nbsp;<i class='fa fa-clock-o fa-rotate-90'></i>\",\"field\":\"lastSeenreadyFormatted\",\"width\":80,\"align\":\"right\",\"tooltip\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Time since the device was sending $state updates\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"State&nbsp;&nbsp;<i class='fa fa-star-half-o'></i> \",\"field\":\"$state\",\"width\":65,\"align\":\"center\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Current State: init, ready, lost, sleeping, disconnected or alert\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery&nbsp;&nbsp;<i class='fa fa-battery-2'></i>\",\"field\":\"voltage\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device battery level in %\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"<i class='fa fa-area-chart'></i> Sensor Values\",\"columns\":[{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°F</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Temperature&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"temperature\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Temperature : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":110,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Humidity&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"humidity\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Humidity : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1000,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" /span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Pressure&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"pressure\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Baromatric Pressure : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Light&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"light\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Light intensity : Photoresistor or APDS9960 or TSL2591 \",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Door Sensor&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"open/close\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Door Sensor : Magnatic or Mercury switch\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Tank Level&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"level\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Tank Level : Distance sensor HC-SR04\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Presence&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"presence\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Presence Detector : tracking IP or MAC\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Motion&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"motion\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Motion Detector : RCWL-0516 or mini PIR Sensor\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Custom&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"custom\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Custom Sensor\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"}]},{\"title\":\"<i class='fa fa-code'></i>Device Status\",\"columns\":[{\"title\":\"Interval&nbsp;&nbsp;<i class='fa fa-undo'></i>\",\"field\":\"sleeptime\",\"width\":40,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device update interval\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"milliseconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"UpTime (ms)&nbsp;&nbsp;<i class='fa fa-clock-o'></i>\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":75,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device uptime milliseconds\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":120,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal&nbsp;&nbsp;<i class='fa fa-wifi'></i>\",\"field\":\"rssi\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"WiFi Signal Strength\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"device Mode&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"mode\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device Mode\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"voltage\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device Battery Voltage\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Memory&nbsp;&nbsp;<i class='fa fa-microchip'></i>\",\"field\":\"memory\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device free heap memory in kb\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"CPU Load&nbsp;&nbsp;<i class='fa fa-tasks'></i>\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device cpu load in %\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$ip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP&nbsp;&nbsp;<i class='fa fa-globe'></i>\",\"field\":\"$ip\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device local IP-Address ($ip)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":1,\"max\":11,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Wifi Channel&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"channel\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device WiFi Channel\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"MAC&nbsp;&nbsp;<i class='fa fa-barcode'></i>\",\"field\":\"$mac\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device mac address ($mac)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"SSID&nbsp;&nbsp;<i class='fa fa-wifi'></i>\",\"field\":\"SSID\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Access point the device device is connected to (provided by http json request)\"},{\"title\":\"Firmware&nbsp;&nbsp;<i class='fa fa-code'></i>\",\"field\":\"name\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the firmware ($fw/name)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Version&nbsp;&nbsp;<i class='fa fa-code-fork'></i>\",\"field\":\"version\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Version of the firmware ($fw/version)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Homie&nbsp;&nbsp;<i class='fa fa-rss-square'></i>\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Homie version ($version)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Platform&nbsp;&nbsp;<i class='fa fa-microchip'></i>\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the platform ($implementation)\",\"tooltip\":true,\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Boot Cause&nbsp;&nbsp;<i class='fa  fa-exclamation-triangle'></i>\",\"field\":\"lastBootCause\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Last cause of reboot (provided by http json request)\"},{\"title\":\"Reset&nbsp;&nbsp;<i class='fa fa-power-off'></i>\",\"field\":\"resetReason\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Last reason of reset (provided by http json request)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Reset #&nbsp;&nbsp;<i class='fa fa-sort-numeric-asc'>\",\"field\":\"resetTotal\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Number of resets (provided by resetCounter node)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"a.uptime&nbsp;&nbsp;<i class='fa fa-clock-o'>\",\"field\":\"resetAverage\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Average uptime between resets (provided by resetCounter node)\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+Number(value).toFixed(2)+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"formatter\":\"progress\",\"title\":\"Sleep %&nbsp;&nbsp;<i class='fa fa-moon-o'></i>\",\"field\":\"sleepRatio\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Ratio between sleep and awake (provided by sleepTimer node)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"}]}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"rowContext\":\"function(e, row){     this.send({ui_control:{callback:'rowContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:{\\\"$name\\\":row._row.data.$name,\\\"$localip\\\":row._row.data.$localip,\\\"name\\\":row._row.data.name},\\\"topic\\\":row._row.data.$topic});     e.preventDefault(); }\",\"cellEdited\":\"function(cell){     this.send({ui_control:{callback:'cellEdited'},         payload:cell._cell.value,         \\\"oldValue\\\":cell._cell.oldValue,         \\\"field\\\":cell._cell.column.field,         \\\"$topic\\\":cell._cell.row.data.$topic}); }\"}}",
                "type": "json"
            },
            {
                "name": "tableDataProp",
                "value": "state",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "aef68527.2a8728",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "add icons",
        "func": "var icons= {\n    \"$state\":[\n        {\"value\":\"init\",\"icon\":\"fa fa-cog fa-spin\"},\n        {\"value\":\"ready\",\"icon\":\"fa fa-spinner fa-spin\"},\n        {\"value\":\"disconnected\",\"icon\":\"fa fa-times\"},\n        {\"value\":\"sleeping\",\"icon\":\"fa fa-moon-o\"},\n        {\"value\":\"lost\",\"icon\":\"fa fa-question-circle\"},\n        {\"value\":\"lostBroker\",\"icon\":\"fa fa-exclamation-triangle\"},\n        {\"value\":\"alert\",\"icon\":\"fa fa-exclamation-triangle\"}\n    ],\n    \"signal\":[\n        {\"value\":10,\"icon\":\"perm_scan_wifi\",\"style\":\"color:#cc0000\"},\n        {\"value\":20,\"icon\":\"wifi\",\"style\":\"color:#cc3300\"},\n        {\"value\":30,\"icon\":\"wifi\",\"style\":\"color:#cc6600\"},\n        {\"value\":40,\"icon\":\"wifi\",\"style\":\"color:#cc9900\"},\n        {\"value\":50,\"icon\":\"wifi\",\"style\":\"color:#cccc00\"},\n        {\"value\":60,\"icon\":\"wifi\",\"style\":\"color:#99cc00\"},\n        {\"value\":70,\"icon\":\"wifi\",\"style\":\"color:#66cc00\"},\n        {\"value\":80,\"icon\":\"wifi\",\"style\":\"color:#33cc00\"},\n        {\"value\":100,\"icon\":\"signal_wifi_4_bar\",\"style\":\"color:#00cc00\"},\n    ],\n    \"battery\":[\n        {\"value\":10,\"icon\":\"battery-alert\",\"style\":\"color:#cc0000\"},\n        {\"value\":20,\"icon\":\"battery_20\"},\n        {\"value\":30,\"icon\":\"battery_30\"},\n        {\"value\":50,\"icon\":\"battery_50\"},\n        {\"value\":60,\"icon\":\"battery_60\"},\n        {\"value\":70,\"icon\":\"battery_70\"},\n        {\"value\":80,\"icon\":\"battery_80\"},\n        {\"value\":90,\"icon\":\"battery_90\"},\n        {\"value\":100,\"icon\":\"battery_full\",\"style\":\"color:#00cc00\"},\n    ]\n};\n\nvar status = {fill:\"yellow\",shape:\"dot\",text: \"no msg.state\"};\nif (msg.hasOwnProperty(\"state\")) {\n    status.text=\"device=\";\n    status.text+=(msg.state.$name) ? msg.state.$name : msg.topic;\n    var formatHtml=function(icon) {\n        var html=\"\"\n        if (icon.icon.startsWith('fa')) {\n            html = \"<i class=\\\"\"+icon.icon+'\\\"></i>'; \n        } else {\n            html+='<i class=\"material-icons\"';\n            if (icon.hasOwnProperty(\"style\")) html+=' style=\"'+icon.style+'\"';\n            html+='>'+icon.icon+'</i>';                               \n        }\n        return html;\n    }\n    nextProperty: \n    for (var state in msg.state) {\n        if (icons.hasOwnProperty(state)) {\n            for (var icon of icons[state]) {\n                switch (typeof msg.state[state]) {\n                    case \"string\":\n                        if (msg.state[state]===icon.value) {\n                            msg.state[state+\"Icon\"]=formatHtml(icon);\n                            status.fill=\"green\";\n                            status.text+=state+\" \";\n                            continue nextProperty;\n                        }\n                        break;    \n                    case \"number\":\n                        if (msg.state[state]<=icon.value) {\n                            msg.state[state+\"Icon\"]=formatHtml(icon);\n                            status.fill=\"green\";\n                            status.text+=state+\" \";\n                            continue nextProperty;\n                        }\n                        break;\n                }\n            }\n        }\n    }    \n}\nnode.status(status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "42d28168.17697"
            ]
        ],
        "icon": "font-awesome/fa-wifi",
        "info": "# Add and format icons\n- This node is configured by a json object. \n- All incomming data inside `msg.state`is inspected to the parent keys of this object. \n- The value contains an array of objects defining differend icons and styles to be added.\n- a html formatted string is added to `msg.state.[key+\"Icon\"]`\n- the current version supports font awesome icons supported by the dshboard and material icons including the style and size [ToDo] property\n- Sting values will be compared for a case sensitive match\n- values will be compared `<=`. So arrange the objects in a increasing order.\n\n## configuration object\n- defining the keys to be triggered\n```json\n{\n    \"$state\":[],\n    \"signal\":[],\n    \"battery\":[]\n}\n```\n- to trigger on a the value \"init\" to get a font awsome icon plce ´fa´ at the beginning of the `icon` value\n```json\n{\n    \"value\":\"init\",\n    \"icon\":\"fa fa-cog fa-spin\"\n}\n```\nfor material icons you can use\n```json\n{\n    \"value\":10,\n    \"icon\":\"perm_scan_wifi\",\n    \"style\":\"color:#cc0000\"\n}\n```\n"
    },
    {
        "id": "34634c31.5d4a64",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "lastSeen",
        "func": "if (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\")) {\n    switch (msg.payload.command) {\n        case \"deleteTable\":\n            context.set(\"lastSeen\",undefined);\n            context.set(\"lastState\",undefined);\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"lastSeen&lastState deleted\"});\n            node.warn(\"[lastSeen] lastSeen&lastState deleted\");\n            return msg;\n    }\n}\n\nif (msg.hasOwnProperty(\"topic\") && (msg.hasOwnProperty(\"state\") || msg.payload.hasOwnProperty(\"command\"))) {\n    var lastSeen = context.get(\"lastSeen\");\n    if (lastSeen===undefined) {\n        lastSeen={};\n        context.set(\"lastSeen\",lastSeen);\n    }\n    var lastState = context.get(\"lastState\");\n    if (lastState===undefined) {\n        lastState={};\n        context.set(\"lastState\",lastState);\n    }\n    \n    var pad = function (num) {\n        return (\"0\"+num).slice(-2);\n    };\n    var formatLastSeen = function(lastSeen){\n        if (lastSeen>0) {\n            var secs = Math.floor((Date.now() - lastSeen) / 1000);\n            var minutes = Math.floor(secs / 60);\n            secs = secs%60;\n            var hours = Math.floor(minutes/60);\n            minutes = minutes%60;\n            var days = Math.floor(hours/24);\n            hours = hours%24;\n            if (days>0) {\n                return days+\"days \"+hours+\"hours ago\";\n            } else if (hours>0) {\n                return pad(hours)+\":\"+pad(minutes)+\" ago\";\n            } else if (minutes>0) {\n                return minutes+\"min ago\";\n            } else {\n                return secs+\"s ago\";\n            }\n        }\n        return \"n/a\";\n    }\n    \n    if (msg.hasOwnProperty(\"state\")) {\n        if (msg.state.hasOwnProperty(\"$state\")) {\n            // do not add timestamp if $status==\"lost\" (this is the LWT form the broker)\n            if (!lastSeen.hasOwnProperty(msg.topic)) lastSeen[msg.topic]={};\n            lastState[msg.topic]=msg.state.$state;\n            \n            if (msg.state.$state===\"lost\"){\n                if (lastSeen.hasOwnProperty(msg.topic)) {\n                    msg.state.lastSeenreadyFormatted=\"lost \"+formatLastSeen(lastSeen[msg.topic].ready);\n                } else {\n                    msg.state.lastSeenreadyFormatted=\"never seen\";\n                }\n            } else {\n                msg.state[\"lastSeen\"+msg.state.$state]=Date.now();\n                msg.state[\"lastSeen\"+msg.state.$state+\"Formatted\"]=formatLastSeen(lastSeen[msg.topic][msg.state.$state]);\n                lastSeen[msg.topic][msg.state.$state]=msg.state[\"lastSeen\"+msg.state.$state];\n            }\n        }\n    } else if (msg.payload.hasOwnProperty(\"command\")) {\n        switch (msg.payload.command) {\n            case \"updateData\":\n                msg.payload.arguments=[[]];\n                for (let topic in lastSeen) {\n                    if (lastSeen.hasOwnProperty(topic)) {\n                        let lineData={\"$topic\":topic};\n                        for (let value in lastSeen[topic]) {\n                            if (lastSeen[topic].hasOwnProperty(value)) {\n                                lineData[\"lastSeen\"+value]=lastSeen[topic][value];\n                                lineData[\"lastSeen\"+value+\"Formatted\"]=formatLastSeen(lastSeen[topic][value]);\n                            }\n                        }\n                        if (lastState[topic]===\"lost\") {\n                            if (lastSeen[topic].hasOwnProperty(\"ready\")) {\n                                lineData[\"lastSeenreadyFormatted\"]=\"lost \"+formatLastSeen(lastSeen[topic].ready); \n                            } else {\n                                lineData[\"lastSeenreadyFormatted\"]=\"never seen\";\n                            }\n                        }\n                        msg.payload.arguments[0].push(lineData);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 489,
        "wires": [
            [
                "aef68527.2a8728"
            ]
        ],
        "icon": "node-red/timer.svg",
        "info": "# build last seen timestamps\n## description\nThis function looks for msg.state.$state messages and add a timestamp (absolute and difference from last occurence)\n## how to use\n- Place this node in your data stream before the `handle tableData` node. The payload must be like this to be activated. Other messages will be passed through\n```\nmsg.payload.state={\n    $name : \"deviceName\",\n    $state : \"anyState\"\n}\n```\n\n- Place a inject node infront with msg.payload\n```json\n{\n    \"command\": \"updateData\",\n    \"column\": \"lastSeen\"\n}\n```\nto get the formatted last seen string updtated the inject node should repead every mnute or so. \n\n### last seen formatted\na formatted string is generated out of the last known timestamp saved in node context and the actual one. The difference between last occurance and the current time is formatted as a human readable string. This ist especially usefull to track `lost` or `sleeping` devices. As this string will change over time even when the value stays constant and is not updated by the mqtt the inject node should trigger every minute.\nThe `lost` state is handeled a little bit different as this is issued by the broker as a LWT (last will topic). in this case the timestamp is irrelevant because it is not issued by the device. The last seen timestamp of the `ready` state is used instead to issue the last time the device is seen. If the device was never seeen in since the start of this flow `never`will be sent.\n\nExample:\n\n- Input:\n```\nmsg.payload.state={\n    $name : \"deviceName\",\n    $state : \"ready\"\n}\n```\n- Output\n```\nmsg.payload.state={\n    $name : \"deviceName\",\n    $state : \"ready\",\n    lastSeenready : unixTimeStamp,\n    lastSeenreadyFormatted : \"01:10 ago\"\n}\n```\n\n### data storage\nNo database is required. Al data is stored in the **node context** on `default` context provider. As all data is **live** and automaticaly rebuild after restart is is not nessesary and not recomended that anything else than `memory Only` is used.\n\n- `lastSeen` _object_ stores all last seen values  to compare against new values to format the human readable string\n- `lastState` _object_ stores all last values of $state in order to handle the special `$state='lost'` "
    },
    {
        "id": "40aad1b5.3e00f",
        "type": "inject",
        "z": "b14e8366.8ef76",
        "name": "update",
        "topic": "updateColumn",
        "payload": "{\"command\":\"updateData\",\"column\":\"lastSeen\"}",
        "payloadType": "json",
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 113,
        "y": 523,
        "wires": [
            [
                "34634c31.5d4a64"
            ]
        ]
    },
    {
        "id": "83642fa.f793cd",
        "type": "link in",
        "z": "b14e8366.8ef76",
        "name": "Watchdog",
        "links": [
            "57af2d67.f98d04",
            "afb88632.4954f8",
            "d3a34ec2.b2b05",
            "2f7dd837.84b348"
        ],
        "x": 68,
        "y": 438,
        "wires": [
            [
                "519588e8.ed6848"
            ]
        ]
    },
    {
        "id": "ab044fc7.86ed3",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "toTable",
        "links": [
            "56aa7287.24ff8c",
            "eb1cd095.a6f3"
        ],
        "x": 459,
        "y": 693,
        "wires": []
    },
    {
        "id": "5a7babf3.397344",
        "type": "comment",
        "z": "b14e8366.8ef76",
        "name": "Plugins",
        "info": "",
        "x": 86,
        "y": 387,
        "wires": []
    },
    {
        "id": "42d28168.17697",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "resetCounter",
        "func": "if (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\")) {\n    switch (msg.payload.command) {\n        case \"deleteTable\":\n            context.set(\"tableData\",undefined);\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"tableData deleted\"});\n            node.warn(\"[resetCounter] tableData deleted\");\n            return msg;\n    }\n}\nconst pluginName=\"resetCounter\";\nconst triggerProperty=\"uptime\";\n\nvar status = {fill:\"red\",shape:\"dot\",text: \"payload=\"+msg.payload};\n// only trigger if msg.state exits and contains the property $name as a unique identifier\nif (msg.hasOwnProperty(\"state\") && msg.topic!==undefined && msg.topic!==\"\") {\n    status.text=\"device=\";\n    status.text+=(msg.state.$name) ? msg.state.$name : msg.topic;\n    status.fill=\"yellow\";\n    // if the plugin needs to save context data\n    var deviceName = msg.topic;\n    var tableData = context.get(\"tableData\",\"file\");\n    if (tableData===undefined) {\n        tableData={};\n        context.set(\"tableData\",tableData,\"file\");\n    }\n    // if the plugin only reacts on certain values (i.e. uptime)\n    if (msg.state.hasOwnProperty(triggerProperty)) {\n        if (!tableData.hasOwnProperty(deviceName)) {\n            tableData[deviceName]={\n                \"resetTotal\":0,\n                \"totalRuntime\":0\n            }\n        }\n        var tableRow=tableData[deviceName];\n        var success=false;\n        \n        // -------------------------------------------------\n        var dateNow=Date.now();\n        if (msg.state.hasOwnProperty(\"$status\")) {\n            switch (msg.state.$status) {\n                case \"sleeping\":\n                    //tableRow.totalRuntime+=tableRow.lastUptime;\n                    tableRow.lastUptime=0;\n                    status.text=\" sleeping\";\n                    break;\n                case \"lost\":\n                    tableRow.lostSince=dateNow;\n                    break;\n            }\n        }\n        if (tableRow.hasOwnProperty(\"lastUptime\")) {\n            // node.warn([msg.state.uptime,tableRow.lastUptime]);\n            if (Number(msg.state.uptime) < tableRow.lastUptime) { // reset detected!\n                if (tableRow.hasOwnProperty(\"lostSince\")) {\n                    tableRow.resetPeriodLast = tableRow.lostSince-tableRow.resetLast;\n                    delete tableRow.resetLast;\n                    delete tableRow.lostSince;\n                }\n                if (tableRow.hasOwnProperty(\"resetLast\")) {\n                    tableRow.resetPeriodLast = dateNow-tableRow.resetLast;\n                }\n                if (tableRow.resetTotal>0) {\n                    tableRow.resetAverage = Math.floor(tableRow.totalRuntime / tableRow.resetTotal);\n                    msg.state.resetAverage=tableRow.resetAverage;\n                    msg.state.resetTotal=tableRow.resetTotal;\n                    msg.state.resetLast=tableRow.resetLast;\n                    msg.state.totalRuntime=tableRow.totalRuntime;\n                }\n            \n                tableRow.resetLast=dateNow;\n                ++tableRow.resetTotal;\n            } else { // device alive - counting up\n                tableRow.totalRuntime += Number(msg.state.uptime)-tableRow.lastUptime;\n            }\n            tableRow.lastUptime=Number(msg.state.uptime);\n        } else { // first recorded uptime + first seen\n            tableRow.lastUptime=Number(msg.state.uptime);\n            tableRow.totalRuntime=tableRow.lastUptime;\n            if (!tableRow.hasOwnProperty(\"firstSeen\")) {\n                tableRow.firstSeen=dateNow;\n                msg.state.firstSeen=dateNow;\n            }\n        }\n        success=true;\n        // -------------------------------------------------\n        \n        if (success) {\n            if (msg.state.hasOwnProperty(\"resetTotal\")) {\n                status.fill=\"green\"\n                status.text=msg.topic+\" resets=\"+msg.state.resetTotal;\n                node.status(status);\n            }\n        } else {\n            status.error({\"pluginName\":pluginName,triggerProperty:msg.state[triggerProperty],\"state\":msg.state})\n            status.text=\"Error device:\"+msg.topic+\" \"+triggerProperty+\"=\"+msg.state[triggerProperty];\n            node.status(status);           \n        }\n    }\n}\n// always pass the original message (+ additional data as suitable)\n// node.warn([\"reset\",msg.topic])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 591,
        "wires": [
            [
                "19e52803.7e3878"
            ]
        ],
        "info": "# reset counter\nDetection of device resets. A reset of a device delivering a uptime value can be detected if the delivered uptime value is lower than the value before.\nIf `msg.state.$state==\"lost\"` is detected a timestamp is recorded. if a new `uptime<lastUptime` is detected the recorded \"lost\" timestamp is used insted of `date.now()`\nif `msg.state.$sate==\"sleeping\"` is detected a timestamp is recorded. On next `ready` the lastUptime is set to 0 so the lower `uptime` does not count as a reset.\n\n## context store\n\n`tabledata` in node context. As the totalRuntime should be calculated over flow restart / reset it shoul be saved to persistent memory\n\n## property trigger\n`msg.state.uptime` period between boot and now _in seconds_\n\n## properties used / required\nproperty | required | unique\n-------- | -------- | -------\n`msg.state.$name` | **required** | **unique**\n`msg.state.uptime` | **required** |\n`msg.state.$lost` | **optional** |\n\n\n## values added\nproperty | description | unit\n-------- | ----------- | ----\n`msg.state.resetAverage` | average period between resets | _in ms_\n`msg.state.resetTotal` | total resets detected | _integer_\n`msg.state.resetLast` | last reset detected | _unix timestamp_\n`msg.state.totalRuntime` | total runtime from first detection to now | _in ms_"
    },
    {
        "id": "19e52803.7e3878",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "sleepTimer",
        "func": "const pluginName=\"sleepTimer\"; // give the plugin a unique name\nconst triggerProperty=\"$state\"; // if the plugin triggers on one specific property you can specifie it here\nconst contextName=\"tableData\"; // name of context store\n\nif (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\")) {\n    switch (msg.payload.command) {\n        case \"deleteTable\":\n            context.set(contextName,undefined);\n            node.status({fill:\"yellow\",shape:\"dot\",text:contextName+\" deleted\"});\n            node.warn(\"[\"+pluginName+\"] \"+contextName+\"deleted\");\n            return msg;\n    }\n}\n\nvar status = {fill:\"red\",shape:\"dot\",text: \"payload=\"+msg.payload};\n// only trigger if msg.state exitst and contains the property $name as a unique identifier\nif (msg.hasOwnProperty(\"state\") && msg.topic!==undefined && msg.topic!==\"\") {\n    status.text=\"device=\";\n    status.text+=(msg.state.$name) ? msg.state.$name : msg.topic;\n    status.fill=\"yellow\";\n    // if the plugin needs to save context data\n    var deviceName = msg.topic;\n    var tableData = context.get(contextName);\n    if (tableData===undefined) {\n        tableData={};\n        context.set(contextName,tableData);\n    }\n    // if the plugin only reacts on certain values (i.e. uptime)\n    if (msg.state.hasOwnProperty(triggerProperty)) { // add additional triggers here\n        if (!tableData.hasOwnProperty(deviceName)) {\n            if (msg.state[triggerProperty]==='sleeping') { // only activate if device is sleeping once\n                tableData[deviceName]={};\n                msg.state.sleepMode=true;\n            } else {\n                msg.state.sleepMode=false;\n                return msg; // sleepMode not enabled yet\n            }\n        }\n        var tableRow=tableData[deviceName];\n        var success=false;\n        \n        // -------------------------------------------------\n        var dateNow=Date.now();\n        switch (msg.state[triggerProperty]) {\n            case 'sleeping':\n                if (tableRow.lastEvent==='ready' && tableRow.hasOwnProperty('awakeTimestamp')) {\n                    tableRow.awakeTime=Math.floor((dateNow - tableRow.awakeTimestamp)/1000); // in seconds\n                }\n                if (tableRow.lastEvent!=='sleeping') {\n                    tableRow.sleepTimestamp=dateNow;\n                    tableRow.lastEvent='sleeping';\n                }\n                break;\n            case 'ready':\n                if (tableRow.lastEvent==='sleeping' && tableRow.hasOwnProperty('sleepTimestamp')) {\n                    tableRow.sleepTime=Math.floor((dateNow - tableRow.sleepTimestamp)/1000); // in seconds\n                }\n                if (tableRow.lastEvent!=='ready') {\n                    tableRow.awakeTimestamp=dateNow;\n                    tableRow.lastEvent='ready';\n                }\n                break;\n            case 'lost':\n                if (tableRow.lastEvent!=='lost') {\n                    // device went from sleeping to lost\n                    if (tableRow.lastEvent==='sleeping' && tableRow.hasOwnProperty('sleepTimestamp')) {\n                        tableRow.sleepTime=Math.floor((dateNow - tableRow.sleepTimestamp)/1000); // in seconds\n                        delete tableRow.sleepTimestamp;\n                    }\n                    // device went form ready to lost\n                    if (tableRow.lastEvent==='ready' && tableRow.hasOwnProperty('awakeTimestamp')) {\n                        tableRow.awakeTime=Math.floor((dateNow - tableRow.awakeTimestamp)/1000); // in seconds\n                        delete tableRow.awakeTimestamp;\n                    }\n                    tableRow.lastEvent='lost';\n                }\n                break;\n            case 'diconnected':\n                delete tableData[deviceName];\n                status.text+=\" disconnected\";\n                break;\n        }\n        if (tableRow.hasOwnProperty('sleepTime') && tableRow.hasOwnProperty('awakeTime')) {\n            msg.state.sleepRatio=tableRow.awakeTime / tableRow.sleepTime * 100;\n            // msg.state.sleepTime=msg.sleepTime;\n            // msg.state.awakeTime.msg.awakeTime;\n        }\n        success=true;\n        // -------------------------------------------------\n        \n        if (success) {\n            status.fill=\"green\"\n            status.text+=\" \"+triggerProperty+\"=\"+msg.state[triggerProperty];\n            node.status(status);\n        } else {\n            status.error({\"pluginName\":pluginName,triggerProperty:msg.state[triggerProperty],\"state\":msg.state})\n            status.text+=\" Error \"+triggerProperty+\"=\"+msg.state[triggerProperty];\n            node.status(status);           \n        }\n    }\n}\n// allways pass the original message (+ additional data as suitable)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 642,
        "wires": [
            [
                "3c6fcccf.742094"
            ]
        ],
        "info": "# sleep timer\nMeasures the sleep and awake time and gives a ratio in %\n\n## context store\n\n`tableData` in node context to store sleep and awake events\n\n## property trigger\n`$state` state changes:\n- `sleeping` begin of sleep period\n- `ready` or `init` begin of awake period\n- `lost` device offline period not added to calculation\n- `diconnected` delete value in tableData\n\n## properties used / required\nproperty | required | unique\n-------- | -------- | -------\n`msg.state.$name` | **required** | **unique**\n\n\n## values added or modified\n\nproperty | modification | description | unit\n-------- | ------------ | ----------- | ----\n`msg.state.sleepMode` | new | device usiong sleep mode | *boolean*\n`msg.state.sleepRatio` | new | percentage of time running | *integer* _in %_\n`msg.state.sleepTime` | optional | time sleeping | *integer* _in seconds_\n`msg.state.awakeTime` | optional | time awake | *integer* _in seconds_"
    },
    {
        "id": "3c6fcccf.742094",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "pluginTemplate",
        "func": "const pluginName=\"pluginTemplate\"; // give the plugin a unique name\nconst triggerProperty=\"uptime\"; // if the plugin triggers on one specific property you can specifie it here\nconst contextName=\"tableData\"; // name of context store\n\nif (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\")) {\n    switch (msg.payload.command) {\n        case \"deleteTable\":\n            context.set(contextName,undefined);\n            node.status({fill:\"yellow\",shape:\"dot\",text:contextName+\" deleted\"});\n            node.warn(\"[\"+pluginName+\"] \"+contextName+\"deleted\");\n            return msg;\n    }\n}\n\nvar status = {fill:\"red\",shape:\"dot\",text: \"payload=\"+msg.payload};\n// only trigger if msg.state exitst and contains the property $name as a unique identifier\nif (msg.hasOwnProperty(\"state\") && msg.topic!==undefined && msg.topic!==\"\") {\n    status.text=\"device=\";\n    status.text+=(msg.state.$name) ? msg.state.$name : msg.topic;\n    status.fill=\"yellow\";\n    // if the plugin needs to save context data\n    var deviceName = msg.topic;\n    var tableData = context.get(contextName);\n    if (tableData===undefined) {\n        tableData={};\n        context.set(contextName,tableData);\n    }\n    // if the plugin only reacts on certain values (i.e. uptime)\n    if (msg.state.hasOwnProperty(triggerProperty)) { // add additional triggers here\n        if (!tableData.hasOwnProperty(deviceName)) tableData[deviceName]={}\n        var tableRow=tableData[deviceName];\n        var success=false;\n        \n        // -------------------------------------------------\n        // place your code here\n        // if success leave with\n        success=true;\n        // -------------------------------------------------\n        \n        if (success) {\n            status.fill=\"green\"\n            status.text+=\" \"+triggerProperty+\"=\"+msg.state[triggerProperty];\n            node.status(status);\n        } else {\n            status.error({\"pluginName\":pluginName,triggerProperty:msg.state[triggerProperty],\"state\":msg.state})\n            status.text+=\" Error \"+triggerProperty+\"=\"+msg.state[triggerProperty];\n            node.status(status);           \n        }\n    }\n}\n// allways pass the original message (+ additional data as suitable)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 693,
        "wires": [
            [
                "ab044fc7.86ed3",
                "b8a503f7.acb3d"
            ]
        ],
        "info": "# plugin template\nYou can use this template to write your own plugin. Please take the time and publish plugins others might like to use.\n\n## context store\n\n`tabledata` in node context. Using memory only (recomended unless usefull)\n\n## property trigger\n`uptime` period between boot and now _in seconds_\n\n## properties used / required\nproperty | required | unique\n-------- | -------- | -------\n`msg.state.$name` | **required** | **unique**\n`msg.state.uptime` | **required** |\n`msg.state.$lost` | **optional** |\n\n\n## values added or modified\nif the plugin modifies existing properties please make sure that the following flow and the table are aware!\nproperty | modification | description | unit\n-------- | ------------ | ----------- | ----\n`msg.state.newProperty` | new | average period between resets | _in ms_\n"
    },
    {
        "id": "519588e8.ed6848",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "$state watchdog",
        "func": "// -------------------------------------------------------------------\n// this function provides a timeOut function to emulate the LWT functionality\n// for $state=\"lost\". on every received msg.state.$state it resets the timer\n// if the timer runs out it issues msg.state.$state=\"lost\" and a message to \n// the extra filed msg.state.resetReason\n// can be configured by:\n// msg.state.interval in seconds\n// -------------------------------------------------------------------\n\nif (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\")) {\n    switch (msg.payload.command) {\n        case \"deleteTable\":\n            let lostTimers = context.get(\"lostTimers\") || {};\n            Object.keys(lostTimers).forEach((key,index) => {\n                clearTimeout(lostTimers[key].timer);\n            });\n            context.set(\"lostTimers\",undefined);\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"All timers deleted\"});\n            node.warn(\"[$state watchdog] All timers deleted\");\n            return msg;\n    }\n}\n\nvar timeout=120     // in seconds (set to 0 if you want to disable this feature)\nvar graceTime=60    // give a little extra to avoid false alarms\n\nvar status={fill:\"red\",shape:\"dot\",text:\"\"};\nif (msg.hasOwnProperty(\"state\") && msg.state.hasOwnProperty(\"interval\")) {\n    if (!Number.isNaN(Number(msg.state.interval))) {\n        timeout=Number(msg.state.interval); //*1.5 \n    } else {\n        status.text=\"[$state watchdog] msg.state.interval is NaN\";\n        node.error([status.text,msg]);\n        node.status(status);\n        return msg;\n    }\n}\nvar resetReason=\"device lost! No refresh the last \"+timeout+\"sec\"\n\n// ------------------------------------------------------\n// emulate timeout for $state=\"lost\"\n// ------------------------------------------------------\nfunction mqttTimeout(arg) {\n    arg.node.send(arg.msg);\n}\n    \nif (timeout>0 && msg.hasOwnProperty(\"topic\")) {\n    // we have to keep track on existing timers\n    let lostTimers = context.get(\"lostTimers\"); // allways memoryOnly as the timers do not extist after restart\n    if (lostTimers===undefined) {\n        lostTimers={};\n        context.set(\"lostTimers\",lostTimers);\n    }\n    if (lostTimers.hasOwnProperty(msg.topic)) { // timer exists so clear it first\n        clearTimeout(lostTimers[msg.topic].timer);\n    }\n    if (!lostTimers.hasOwnProperty(msg.topic)) lostTimers[msg.topic]={};\n    lostTimers[msg.topic].timeout=timeout;\n    lostTimers[msg.topic].timer=setTimeout(mqttTimeout+graceTime, timeout*1000, \n        {\n            \"node\":node,\n            \"msg\":{\n                \"topic\":msg.topic,\n                \"state\":{\n                    \"$state\":\"lost\",\n                    \"resetReason\":resetReason\n                }\n                \n            }\n        }\n    );\n    node.status({fill:\"green\",shape:\"dot\",text:msg.topic+\"=\"+timeout+\"s\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 438,
        "wires": [
            [
                "34634c31.5d4a64"
            ]
        ],
        "icon": "node-red/swap.svg",
        "info": "# msg.state.$state watchdog\n## decription\nthis function provides a timeOut function (watchdog) to emulate the LWT functionality\nissueing $state=\"lost\" if a device did not update in time. \non every received msg.state.$state it resets the timer\nif the timer runs out it issues `msg.state.$state=\"lost\"` and a message to \nthe extra filed `msg.state.resetReason`\n\nyou can find more about the [homie convention device lifecyle here](https://homieiot.github.io/specification/#device-lifecycle).\n\n## how to use\n- place it in the main plugin list if you like to have a watchdog for every device with the same timeout\n- place it after a translator / data source if only some devices need a watchdog because they do not supprt mqtt LWT or similar techniques to detect offline devices and set the msg.state.$state correcty over the complete lifecycle.\n- place diffent watchdogs in the aquisition area behind translators if you need **individual timeout durations**.\n- edit the `timeout` variable in the code or\n- send msg.state.interval to set individual timeout by message\n\n## do do / issues\n- have to find out if a clearTimeout / setTimeout on every message is the most efficient way.\n- perhaps own code with one interval timer more efficient for a bigger number of devices\n\n## homie features\n- `$state` *string* current state of the device\n- `interval` *integer* in sec \n\n## extended features\n- `resetReason` *string* description that the device was flaged by the watchdog"
    },
    {
        "id": "128206ff.de6659",
        "type": "link in",
        "z": "b14e8366.8ef76",
        "name": "Plugins",
        "links": [
            "8c534b92.0751b8",
            "bce073d8.c8549",
            "60039f.4881ac6",
            "5b06e9af.10c888",
            "721f1868.d5ab18"
        ],
        "x": 68,
        "y": 489,
        "wires": [
            [
                "34634c31.5d4a64"
            ]
        ]
    },
    {
        "id": "b8a503f7.acb3d",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "to ui_table handler",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "dc3dd745.3de488",
        "type": "ui_table",
        "z": "b14e8366.8ef76",
        "group": "a59b864f.91fef8",
        "name": "",
        "order": 7,
        "width": "19",
        "height": "10",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 290,
        "y": 820,
        "wires": [
            [
                "b621cefc.1a486"
            ]
        ]
    },
    {
        "id": "17f44943.edb537",
        "type": "ui_ui_control",
        "z": "b14e8366.8ef76",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "9b9aaa9.ff7b158"
            ]
        ]
    },
    {
        "id": "b621cefc.1a486",
        "type": "switch",
        "z": "b14e8366.8ef76",
        "name": "filter callbacks",
        "property": "$exists(ui_control)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 820,
        "wires": [
            [
                "bcc92e04.36fc3"
            ],
            [
                "9b9aaa9.ff7b158",
                "fdbc7a93.6a2618"
            ]
        ]
    },
    {
        "id": "eb1cd095.a6f3",
        "type": "link in",
        "z": "b14e8366.8ef76",
        "name": "Table",
        "links": [
            "ba2f2b53.357f48",
            "c7c4ccfa.7acd8",
            "c95ef116.05bd4",
            "ab044fc7.86ed3",
            "811700f4.f5a15"
        ],
        "x": 175,
        "y": 960,
        "wires": [
            [
                "9b9aaa9.ff7b158"
            ]
        ]
    },
    {
        "id": "9b9aaa9.ff7b158",
        "type": "subflow:4d93f23e.8258ac",
        "z": "b14e8366.8ef76",
        "name": "",
        "env": [
            {
                "name": "tabulator",
                "value": "{\"customHeight\":18,\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$topic\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"Expand&nbsp;&nbsp;<i class='fa fa-plus-circle'></i> \",\"field\":\"expand\",\"headerVertical\":\"flip\",\"headerTooltip\":\"click to expand more details\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"outputFormat\":\"DD/MM/YY hh:mm:ss\",\"inputFormat\":\"YYYY-MM-DD hh:mm:ss\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Time Received&nbsp;&nbsp;<i class='fa fa-clock-o'></i>\",\"field\":\"time\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":75,\"headerVertical\":\"flip\",\"headerTooltip\":\"Time data received\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal&nbsp;&nbsp;<i class='fa fa-signal fa-rotate-90'></i>\",\"field\":\"ssid\",\"width\":40,\"align\":\"center\",\"frozen\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Signal Strength for WiFi device (signalIcon)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Location&nbsp;&nbsp;<i class='fa fa-map-marker fa-rotate-90'></i>\",\"field\":\"$location\",\"width\":140,\"headerTooltip\":\"Location of the device (room)\",\"tooltip\":true,\"headerVertical\":\"flip\",\"editor\":\"autocomplete\",\"editorParams\":{\"freetext\":true,\"allowEmpty\":true,\"showListOnEmpty\":true,\"values\":true},\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Name&nbsp;&nbsp;<i class='fa fa-tag fa-rotate-90'></i>\",\"field\":\"$location\",\"width\":140,\"frozen\":true,\"tooltip\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the device ($name)\",\"editor\":\"input\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContextNoHide'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Last Update&nbsp;&nbsp;<i class='fa fa-clock-o fa-rotate-90'></i>\",\"field\":\"lastSeenreadyFormatted\",\"width\":80,\"align\":\"right\",\"tooltip\":true,\"headerVertical\":\"flip\",\"headerTooltip\":\"Time since the device was sending $state updates\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"State&nbsp;&nbsp;<i class='fa fa-star-half-o'></i> \",\"field\":\"$state\",\"width\":65,\"align\":\"center\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Current State: init, ready, lost, sleeping, disconnected or alert\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery&nbsp;&nbsp;<i class='fa fa-battery-2'></i>\",\"field\":\"voltage\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device battery level in %\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"<i class='fa fa-area-chart'></i> Sensor Values\",\"columns\":[{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°F</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Temperature&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"temperature\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Temperature : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":110,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Humidity&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"humidity\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Humidity : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1000,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" /span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Pressure&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"pressure\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Baromatric Pressure : BME280\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Light&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"light\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Light intensity : Photoresistor or APDS9960 or TSL2591 \",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Door Sensor&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"open/close\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Door Sensor : Magnatic or Mercury switch\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Tank Level&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"level\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Tank Level : Distance sensor HC-SR04\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Presence&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"presence\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Presence Detector : tracking IP or MAC\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":1,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" Â°C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Motion&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"motion\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Motion Detector : RCWL-0516 or mini PIR Sensor\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Custom&nbsp;&nbsp;<i class='fa fa-thermometer-half'></i>\",\"field\":\"custom\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Custom Sensor\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"}]},{\"title\":\"<i class='fa fa-code'></i>Device Status\",\"columns\":[{\"title\":\"Interval&nbsp;&nbsp;<i class='fa fa-undo'></i>\",\"field\":\"sleeptime\",\"width\":40,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device update interval\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"milliseconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"UpTime (ms)&nbsp;&nbsp;<i class='fa fa-clock-o'></i>\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":75,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device uptime milliseconds\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":120,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal&nbsp;&nbsp;<i class='fa fa-wifi'></i>\",\"field\":\"rssi\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"WiFi Signal Strength\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"device Mode&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"mode\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device Mode\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"voltage\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device Battery Voltage\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"Memory&nbsp;&nbsp;<i class='fa fa-microchip'></i>\",\"field\":\"memory\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device free heap memory in kb\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"right\"},\"title\":\"CPU Load&nbsp;&nbsp;<i class='fa fa-tasks'></i>\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device cpu load in %\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$ip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP&nbsp;&nbsp;<i class='fa fa-globe'></i>\",\"field\":\"$ip\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device local IP-Address ($ip)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":1,\"max\":11,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" </span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Wifi Channel&nbsp;&nbsp;<i class='fa fa-plug'></i>\",\"field\":\"channel\",\"formatter\":\"progress\",\"width\":70,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device WiFi Channel\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"MAC&nbsp;&nbsp;<i class='fa fa-barcode'></i>\",\"field\":\"$mac\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Device mac address ($mac)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"SSID&nbsp;&nbsp;<i class='fa fa-wifi'></i>\",\"field\":\"SSID\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Access point the device device is connected to (provided by http json request)\"},{\"title\":\"Firmware&nbsp;&nbsp;<i class='fa fa-code'></i>\",\"field\":\"name\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the firmware ($fw/name)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Version&nbsp;&nbsp;<i class='fa fa-code-fork'></i>\",\"field\":\"version\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Version of the firmware ($fw/version)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Homie&nbsp;&nbsp;<i class='fa fa-rss-square'></i>\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Homie version ($version)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Platform&nbsp;&nbsp;<i class='fa fa-microchip'></i>\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\",\"headerTooltip\":\"Name of the platform ($implementation)\",\"tooltip\":true,\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Boot Cause&nbsp;&nbsp;<i class='fa  fa-exclamation-triangle'></i>\",\"field\":\"lastBootCause\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Last cause of reboot (provided by http json request)\"},{\"title\":\"Reset&nbsp;&nbsp;<i class='fa fa-power-off'></i>\",\"field\":\"resetReason\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Last reason of reset (provided by http json request)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"Reset #&nbsp;&nbsp;<i class='fa fa-sort-numeric-asc'>\",\"field\":\"resetTotal\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Number of resets (provided by resetCounter node)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"title\":\"a.uptime&nbsp;&nbsp;<i class='fa fa-clock-o'>\",\"field\":\"resetAverage\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Average uptime between resets (provided by resetCounter node)\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+Number(value).toFixed(2)+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"formatter\":\"progress\",\"title\":\"Sleep %&nbsp;&nbsp;<i class='fa fa-moon-o'></i>\",\"field\":\"sleepRatio\",\"width\":100,\"headerVertical\":\"flip\",\"headerTooltip\":\"Ratio between sleep and awake (provided by sleepTimer node)\",\"headerContext\":\"function(e,column){ this.send({ui_control:{callback:'headerContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:column._column.field}); e.preventDefault(); }\"}]}],\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"rowContext\":\"function(e, row){     this.send({ui_control:{callback:'rowContext'},position:{\\\"x\\\":e.x,\\\"y\\\":e.y},payload:{\\\"$name\\\":row._row.data.$name,\\\"$localip\\\":row._row.data.$localip,\\\"name\\\":row._row.data.name},\\\"topic\\\":row._row.data.$topic});     e.preventDefault(); }\",\"cellEdited\":\"function(cell){     this.send({ui_control:{callback:'cellEdited'},         payload:cell._cell.value,         \\\"oldValue\\\":cell._cell.oldValue,         \\\"field\\\":cell._cell.column.field,         \\\"$topic\\\":cell._cell.row.data.$topic}); }\"}}",
                "type": "json"
            },
            {
                "name": "tableDataProp",
                "value": "state",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 900,
        "wires": [
            [
                "dc3dd745.3de488",
                "9080f986.919728"
            ],
            [
                "13c74e37.faf1d2"
            ]
        ]
    },
    {
        "id": "b48938ac.a3de48",
        "type": "comment",
        "z": "b14e8366.8ef76",
        "name": "ui-tabel",
        "info": "",
        "x": 69,
        "y": 790,
        "wires": []
    },
    {
        "id": "bcc92e04.36fc3",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "clicked on cell",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "13c74e37.faf1d2",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "callbacksOut",
        "links": [
            "67323928.b3b4f8",
            "141a6612.7eff7a"
        ],
        "x": 455,
        "y": 960,
        "wires": []
    },
    {
        "id": "fdbc7a93.6a2618",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "table callback",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "9080f986.919728",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "to ui-table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 600,
        "y": 880,
        "wires": []
    },
    {
        "id": "fbeacc29.da69c",
        "type": "switch",
        "z": "b14e8366.8ef76",
        "name": "callback",
        "property": "ui_control.callback",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rowContext",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "headerContext",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cellEdited",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "columnMoved",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "columnResized",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "c5e8d2aa.95a1b"
            ],
            [
                "84da8595.9b4d58"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "c6ed61.ddf122a",
        "type": "switch",
        "z": "b14e8366.8ef76",
        "name": "",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "updateDevice",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "updateDevices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteDevice",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ignoreDevice",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "unIgnoreDevice",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refreshTable",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deleteTable",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "columnHide",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "columnsUnHide",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "columnUnHide",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restoreColumnOrder",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "resetColumnWidth",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setResponsiveLayout",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 13,
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "b530da6a.0dbd88"
            ],
            [
                "b530da6a.0dbd88"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "4914bb51.a2f754"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ],
            [
                "811700f4.f5a15"
            ]
        ]
    },
    {
        "id": "811700f4.f5a15",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "toTable",
        "links": [
            "56aa7287.24ff8c",
            "eb1cd095.a6f3"
        ],
        "x": 339,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b530da6a.0dbd88",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "toAquire",
        "links": [
            "fd22b284.132f5",
            "56377cc8.0ec854"
        ],
        "x": 335,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2f7dd837.84b348",
        "type": "link out",
        "z": "b14e8366.8ef76",
        "name": "toPlugins",
        "links": [
            "ba428a2.7a3a378",
            "83642fa.f793cd"
        ],
        "x": 535,
        "y": 1520,
        "wires": []
    },
    {
        "id": "31c9c757.d74678",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "rowCommand",
        "func": "// as this feeds back to the beginning of the flow it is time for a new message object\n// otherwise new and old data mix\n// all command data fills into a payload so it would unlikly survice verry long ;)\n\nvar msgOut={};\nswitch (msg.topic){\n    case 'unIgnoreDevice':\n        msgOut={\n            topic:msg.payload,\n            payload:{\n                \"command\":msg.topic,\n                \"object\":msg.payload\n            }\n        };\n        break;\n    case 'deleteTable':\n    case 'updateDevice':\n    case 'deleteDevice':\n    case 'ignoreDevice':\n        msgOut={\n            topic:msg.sourceMsg.topic,\n            socketid:msg.socketid,\n            payload:{\n                \"command\":msg.topic,\n                \"object\":msg.sourceMsg.topic,\n                \"$localip\":msg.sourceMsg.payload.$localip,\n                \"$name\":msg.sourceMsg.payload.$name,\n                \"name\":msg.sourceMsg.payload.name\n            }\n        };\n        break;\n    default:\n        msgOut={\n            topic:msg.sourceMsg.rowData.$topic,\n            payload:{\n                \"command\":msg.topic,\n                \"object\":msg.sourceMsg.$topic,\n                \"$localip\":msg.sourceMsg.payload.$localip,\n                \"$name\":msg.sourceMsg.payload.$name,\n                \"name\":msg.sourceMsg.payload.name,\n            }\n        }\n}\nnode.status({fill:\"green\",shape:\"dot\",text:msgOut.payload.command});\nreturn msgOut;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "c6ed61.ddf122a",
                "dd28eda2.f2e78"
            ]
        ]
    },
    {
        "id": "d09bf59c.8f2f58",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "colCommand",
        "func": "// as this feeds back to the beginning of the flow it is time for a new message object\n// otherwise new and old data mix\n// all command data fills into a payload so it would unlikly survice verry long ;)\n\nvar msgOut={\n    topic:\"columnRightClick\",\n    payload:{\n        \"command\":msg.topic,\n        \"object\":msg.payload\n    }\n}\n\n// some commands need the column from the prosition where the context menu was triggered\n\nswitch (msg.topic){\n    case \"columnHide\":\n        msgOut.payload.object=msg.sourceMsg.payload;\n        break;\n}\nnode.status({fill:\"green\",shape:\"dot\",text:msgOut.payload.command});\nreturn msgOut;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "c6ed61.ddf122a",
                "185a85ab.df0bea"
            ]
        ]
    },
    {
        "id": "9ed144ff.673c08",
        "type": "ui_context_menu",
        "z": "b14e8366.8ef76",
        "group": "a59b864f.91fef8",
        "order": 1,
        "width": 0,
        "height": -1,
        "fontSize": 16,
        "position": "msg",
        "outputField": "payload",
        "xCoordinate": "500",
        "yCoordinate": "450",
        "menu": "msg",
        "menuItems": [
            {
                "id": "2",
                "icon": "fa-plus-square",
                "label": "unhide all columns",
                "topic": "columnsUnHide",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "3",
                "icon": "fa-recycle",
                "label": "refresh Table",
                "topic": "refreshTable",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "4",
                "icon": "fa-table",
                "label": "delete table",
                "topic": "deleteTable",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": "2",
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "msgBased",
        "x": 350,
        "y": 1200,
        "wires": [
            [
                "d09bf59c.8f2f58"
            ]
        ]
    },
    {
        "id": "84da8595.9b4d58",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "build column menu",
        "func": "msg.menu=[\n    {\n        \"text\": \"update devices\",\n        \"icon\": \"fa-undo\",\n        \"enabled\": true,\n        \"topic\": \"updateDevices\",\n    },\n    {\n        \"text\": \"---\"\n    },\n    {\n        \"text\": \"hide column\",\n        \"icon\": \"fa-minus-square\",\n        \"enabled\": true,\n        \"topic\": \"columnHide\",\n    },\n    {\n        \"text\": \"unhide column\",\n        \"icon\": \"fa-minus-square-o\",\n        \"enabled\": (msg.hiddenColumns.length>0) ? true : false,\n        \"sub\": msg.hiddenColumns\n    },\n    {\n        \"text\": \"unhide all columns\",\n        \"icon\": \"fa-minus-square\",\n        \"enabled\": true,\n        \"topic\": \"columnsUnHide\",\n    },\n    {\n        \"text\": \"---\"\n    },\n    {\n        \"text\": \"restore column order\",\n        \"icon\": \"fa-sort fa-rotate-90\",\n        \"enabled\": true,\n        \"topic\": \"restoreColumnOrder\"\n    },\n    {\n        \"text\": \"reset column width\",\n        \"icon\": \"fa-arrows-h\",\n        \"enabled\": true,\n        \"topic\": \"resetColumnWidth\"\n    },\n    {\n        \"text\": \"rersponsive layout\",\n        \"icon\": \"fa-mobile\",\n        \"enabled\": true,\n        \"topic\": \"setResponsiveLayout\"\n    },\n    {\n        \"text\": \"refresh table\",\n        \"icon\": \"fa-recycle\",\n        \"enabled\": true,\n        \"topic\": \"refreshTable\"\n    },\n    {\n        \"text\": \"clear table\",\n        \"icon\": \"fa-trash\",\n        \"enabled\": true,\n        \"topic\": \"deleteTable\"\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "9ed144ff.673c08",
                "e1b064a4.31f0b8"
            ]
        ]
    },
    {
        "id": "141fda1d.140cc6",
        "type": "comment",
        "z": "b14e8366.8ef76",
        "name": "callbacks & context menus",
        "info": "",
        "x": 130,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c5e8d2aa.95a1b",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "build row menu",
        "func": "msg.menu=[\n    {\n        \"text\": \"update device\",\n        \"icon\": \"fa-undo\",\n        \"enabled\": true,\n        \"topic\": \"updateDevice\",\n    },\n    {\n        \"text\": \"---\"\n    },\n    {\n        \"text\": \"delete device\",\n        \"icon\": \"fa-trash\",\n        \"enabled\": true,\n        \"topic\": \"deleteDevice\",\n    },\n    {\n        \"text\": \"ignore device\",\n        \"icon\": \"fa-minus-square-o\",\n        \"enabled\": true,\n        \"topic\": \"ignoreDevice\",\n    },\n    {\n        \"text\": \"unignore devices\",\n        \"icon\": \"fa-plus-square-o\",\n        \"enabled\": (msg.ignoredDevices.length>0) ? true : false,\n        \"sub\": msg.ignoredDevices\n    },\n    {\n        \"text\": \"unignore all devices\",\n        \"icon\": \"fa-plus-square\",\n        \"enabled\": true,\n        \"topic\": \"unIgnoreDevices\",\n    },\n    {\n        \"text\": \"---\"\n    },\n    {\n        \"text\": \"refresh table\",\n        \"icon\": \"fa-recycle\",\n        \"enabled\": true,\n        \"topic\": \"refreshTable\"\n    },\n    {\n        \"text\": \"clear table\",\n        \"icon\": \"fa-trash\",\n        \"enabled\": true,\n        \"topic\": \"deleteTable\"\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 1020,
        "wires": [
            [
                "d93b3611.bf7198",
                "faad5687.d7b4d8"
            ]
        ]
    },
    {
        "id": "d93b3611.bf7198",
        "type": "ui_context_menu",
        "z": "b14e8366.8ef76",
        "group": "a59b864f.91fef8",
        "order": 1,
        "width": 0,
        "height": -1,
        "fontSize": 16,
        "position": "msg",
        "outputField": "payload",
        "xCoordinate": "500",
        "yCoordinate": "450",
        "menu": "msg",
        "menuItems": [
            {
                "id": "2",
                "icon": "fa-plus-square",
                "label": "unhide all columns",
                "topic": "columnsUnHide",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "3",
                "icon": "fa-recycle",
                "label": "refresh Table",
                "topic": "refreshTable",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "4",
                "icon": "fa-table",
                "label": "delete table",
                "topic": "deleteTable",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": "2",
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "msgBased",
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "31c9c757.d74678"
            ]
        ]
    },
    {
        "id": "141a6612.7eff7a",
        "type": "link in",
        "z": "b14e8366.8ef76",
        "name": "callbacksIn",
        "links": [
            "11c6abc1.9c8b54",
            "13c74e37.faf1d2"
        ],
        "x": 47,
        "y": 1120,
        "wires": [
            [
                "fbeacc29.da69c",
                "11324da9.6f5c02"
            ]
        ]
    },
    {
        "id": "185a85ab.df0bea",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "colCommand",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 1200,
        "wires": []
    },
    {
        "id": "dd28eda2.f2e78",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "rowCommand",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 700,
        "y": 1080,
        "wires": []
    },
    {
        "id": "11324da9.6f5c02",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "callback",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 160,
        "y": 1188,
        "wires": []
    },
    {
        "id": "f0508078.a43c7",
        "type": "ui_toast",
        "z": "b14e8366.8ef76",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "clear table?",
        "x": 410,
        "y": 1420,
        "wires": [
            [
                "4914bb51.a2f754"
            ]
        ]
    },
    {
        "id": "4914bb51.a2f754",
        "type": "function",
        "z": "b14e8366.8ef76",
        "name": "confirm",
        "func": "var originalMsg = context.get('originalMsg');\nif (msg!==undefined && originalMsg===undefined) {\n    var dialogMsg={\n        payload:\"Do you realy whant to delete the complete table and all statistics. Cell edits and layout will be preserved.\",\n        topic:\"CLEAR TABLE\",\n        socketid:msg.socketid\n    };\n    context.set('originalMsg',msg);\n    return [dialogMsg,null];\n} else {\n    context.set('originalMsg',undefined);\n    if (msg.payload===\"OK\") {\n        return [null,originalMsg];\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 420,
        "y": 1500,
        "wires": [
            [
                "f0508078.a43c7"
            ],
            [
                "2f7dd837.84b348"
            ]
        ]
    },
    {
        "id": "faad5687.d7b4d8",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "rowMenu",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 600,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e1b064a4.31f0b8",
        "type": "debug",
        "z": "b14e8366.8ef76",
        "name": "rowMenu",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 540,
        "y": 1140,
        "wires": []
    },
    {
        "id": "91bf4a6f.de4ab8",
        "type": "comment",
        "z": "b14e8366.8ef76",
        "name": "Input",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "b81701a5.db23e",
        "type": "mqtt-broker",
        "z": "",
        "name": "uMQTT",
        "broker": "192.168.0.2",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a59b864f.91fef8",
        "type": "ui_group",
        "z": "",
        "name": "Remote Device Table",
        "tab": "2c2914b0.77f47c",
        "order": 2,
        "disp": false,
        "width": "19",
        "collapse": false
    },
    {
        "id": "2c2914b0.77f47c",
        "type": "ui_tab",
        "z": "",
        "name": "Remote Device Table",
        "icon": "dashboard",
        "order": 19,
        "disabled": false,
        "hidden": false
    }
]
